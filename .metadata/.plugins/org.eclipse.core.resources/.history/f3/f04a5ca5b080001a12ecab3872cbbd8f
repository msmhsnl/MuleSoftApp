<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <batch:job name="mulesoftappBatch">
        <batch:input>
            <poll doc:name="Poll">
                <fixed-frequency-scheduler frequency="1" timeUnit="SECONDS"/>
                <db:select config-ref="MasterData_Database_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[SELECT Products.ProductCode,Prices.SellingPrice
FROM Products
JOIN Prices ON Products.ProductCode=Prices.ProductCode
WHERE Products.IsActive=1 AND Prices.IsActive=1]]></db:parameterized-query>
                </db:select>
            </poll>
            <set-variable variableName="randm" value="#[new java.util.Random().nextInt(100)]" doc:name="Variable"/>
            <batch:set-record-variable variableName="rec" value="#[new java.util.Random().nextInt(100)]" doc:name="Record Variable"/>

        </batch:input>
        <batch:process-records>
            <batch:step name="Batch_Step">
                <foreach collection="#[payload]" doc:name="For Each">
                    <logger message="#['AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA']" level="INFO" doc:name="Logger"/>
                </foreach>

            </batch:step>
        </batch:process-records>
    </batch:job>
    <flow name="getOrdersFlow">
        <flow-ref name="getOrdersByChoiceFlow" doc:name="getOrdersByChoiceFlow"/>
        <set-variable variableName="check" value="#[payload.isEmpty()]" doc:name="Check Variable"/>
        <dw:transform-message doc:name="Transform Message" metadata:id="62c0ec65-81ac-48d1-a2ce-42fa2239acee">
            <dw:input-payload doc:sample="sample_data\list_map_1.dwl"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---

payload groupBy $.OrderCode map  {
	OrderCode:$.OrderCode[0],
	Items: ($ map (payload01 , indexofitem )-> {
			
		ProductCode: payload01.ProductCode,
		Quantity: payload01.Quantity,
		TotalAmount: payload01.TotalAmount })}


	
		

]]></dw:set-payload>
        </dw:transform-message>

        <set-payload value="#[flowVars.check ?&quot;ORDER CODE CAN NOT FOUND&quot;:payload]" doc:name="Check Result Set Payload"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="getOrdersByChoiceFlow">
        <choice doc:name="Choice">
            <when expression="#[!message.inboundProperties.'http.query.params'.isEmpty()]">
                <db:select config-ref="Order_Database_Configuration" doc:name="OrderData Database-GET">
                    <db:parameterized-query><![CDATA[SELECT OrderHeaders.OrderCode,OrderDetails.ProductCode,OrderDetails.Quantity,OrderDetails.TotalAmount
FROM OrderHeaders
JOIN OrderDetails ON OrderDetails.OrderCode=OrderHeaders.OrderCode
WHERE OrderHeaders.OrderCode= #[message.inboundProperties.'http.query.params'.ordercode]]]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <db:select config-ref="Order_Database_Configuration" doc:name="OrderData Database-GET-ALL">
                    <db:parameterized-query><![CDATA[SELECT OrderHeaders.OrderCode,OrderDetails.ProductCode,OrderDetails.Quantity,OrderDetails.TotalAmount
FROM OrderHeaders
JOIN OrderDetails ON OrderDetails.OrderCode=OrderHeaders.OrderCode]]></db:parameterized-query>
                </db:select>
            </otherwise>
        </choice>
    </flow>
    <flow name="postOrderFlow">
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <enricher source="#[payload]" target="#[flowVars.isOrderInserted]" doc:name="Message Enricher">
            <db:insert config-ref="Order_Database_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[INSERT INTO OrderHeaders (OrderCode,CreateDate)
VALUES (#[payload.OrderCode],GETDATE())]]></db:parameterized-query>
            </db:insert>
        </enricher>
        <set-variable variableName="orderCode" value="#[payload.OrderCode]" doc:name="orderCode Variable"/>

        <foreach collection="#[payload.Items]" doc:name="For Each">

            <enricher source="#[payload]" target="#[flowVars.isOrderInserted]" doc:name="Message Enricher">
                <db:insert config-ref="Order_Database_Configuration" doc:name="Database">
                    <db:parameterized-query><![CDATA[INSERT INTO OrderDetails (OrderCode,ProductCode,Quantity,TotalAmount,CreateDate)
VALUES (#[flowVars.orderCode],#[payload.ProductCode] ,#[payload.Quantity] ,#[payload.TotalAmount] ,GETDATE())]]></db:parameterized-query>

                </db:insert>
            </enricher>

        </foreach>
        <dw:transform-message doc:name="to response">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	isSucceeded: true when ( (flowVars.isOrderInserted as :number)  == 1) otherwise false,
	message: "" when ( (flowVars.isOrderInserted as :number)  == 1) otherwise "An error occurred"
}]]></dw:set-payload>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="deleteOrderFlow">
        <enricher source="#[payload]" target="#[flowVars.orderDeleted]" doc:name="Message Enricher">
            <db:delete config-ref="Order_Database_Configuration" doc:name="Database">
                <db:parameterized-query><![CDATA[DELETE FROM OrderDetails 
WHERE OrderCode= #[message.inboundProperties.'http.query.params'.ordercode]

DELETE FROM OrderHeaders 
WHERE OrderCode= #[message.inboundProperties.'http.query.params'.ordercode]]]></db:parameterized-query>
            </db:delete>
        </enricher>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	isSucceeded: true when ( (flowVars.orderDeleted as :number)  == 1) otherwise false,
	message: "Order deleted" when ( (flowVars.orderDeleted as :number)  == 1) otherwise "An error occurred"
}
]]></dw:set-payload>
        </dw:transform-message>

        <logger level="INFO" doc:name="Logger"/>
    </flow>


</mule>
